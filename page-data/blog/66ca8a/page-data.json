{"componentChunkName":"component---src-templates-post-js","path":"/blog/66ca8a","result":{"pageContext":{"md_path":"drf_serializer","title":"Django REST Framework - Serializers","description":"This article is a brief note about basic DRF serializers (Serializers and ModelSerializer)First, we need to create a simple model for performing follo...","image":"https://i.imgur.com/wmsjgHa.png","uuid":"66ca8a","text":"# Django REST Framework - Serializers\n\n![](https://i.imgur.com/wmsjgHa.png)\n\nThis article is a brief note about basic DRF serializers (`Serializers` and `ModelSerializer`)\n\n## Create A Simple Article Model\n\nFirst, we need to create a simple model for performing following serializer operations\n\n- In the `models.py` of the django app, create the `Article` as below\n\n    ```python\n    class Article(models.Model):\n        title = models.CharField(max_length=100)\n        author = models.CharField(max_length=100)\n        email = models.EmailField(max_length=100)\n        date = models.DateField(auto_now_add=True)\n\n        def __str__(self):\n            return self.title\n    ```\n\n- Make migrations to create table in database\n    `python manage.py makemigrations`\n    `python manage.py migrate`\n\n## Serializers\n\n>`serializers` allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types.\n\nIn short, `serializers` is for converting data between instance and other data type such as JSONm XML.\n\nLet's create a simple serializer for `Article` and use Django shell to see what happend.\n\n- Create `serializers.py` in the Django APP and add below code\n    ```python\n    from rest_framework import serializers\n    from .models import Article\n\n\n    class ArticleSerializer(serializers.Serializer):\n        title = serializers.CharField(max_length=100)\n        author = serializers.CharField(max_length=100)\n        email = serializers.EmailField(max_length=100)\n        date = serializers.DateField()\n\n        def create(self, validated_data):\n            return Article.objects.create(validated_data)\n\n        def update(self, instance, validated_data):\n            instance.title = validated_data.get('title', instance.title)\n            instance.author = validated_data.get('author', instance.author)\n            instance.email = validated_data.get('email', instance.email)\n            instance.date = validated_data.get('date', instance.date)\n            instance.save()\n            return instance\n    ```\n    \n- Start a Django shell\n    `python manage.py shell`\n\n- Import dependencies\n    ```python\n    from snippets.models import Snippet\n    from snippets.serializers import SnippetSerializer\n    from rest_framework.renderers import JSONRenderer\n    from rest_framework.parsers import JSONParser\n    ```\n- Create a new `Article` instance\n    ```python\n    a = Article(title='test title', author='test author', email='test_email@email.com')`\n    a.save()\n    ```\n\n- Use `serializer` to serialize the instance `a`\n    ```python\n    serializer = ArticleSerializer(a)\n    serializer.data\n    ```\n    \n    output:\n    \n    `{'title': 'test title', 'author': 'test author', 'email': 'test_email@email.com', 'date': '2021-07-26'}`\n    \n    The instance `a` is converted to Python native data type `dict` by `serializer`\n    \n- Use `JSONRenderer` to render this dictionary to JSON\n    ```python\n    content = JSONRenderer().render(serilaizer.data)\n    content\n    ```\n    \n    output:\n    \n    `b'{\"title\":\"test title\",\"author\":\"test author\",\"email\":\"test_email@email.com\",\"date\":\"2021-07-26\"}'`\n\n- Serializers could also serialize a `QuerySet` (multiple instances)\n    ```python\n    queryset = Article.objects.all()\n    serializer = ArticleSerializer(queryset, many=True)\n    serializer.data\n    ```\n    \n    output:\n    \n    ```\n    [OrderedDict([('title', 'test title'), ('author', 'test author'), ('email', 'test_email@email.com'), ('date', '2021-07-26')]), OrderedDict([('title', 'test title 2'), ('author', 'test author 2'), ('email', 'test_email_2@email.com'), ('date', '2021-07-26')])]\n    ```\n\n## Model Serializer\n\n> The ModelSerializer class provides a shortcut that lets you automatically create a Serializer class with fields that correspond to the Model fields.\n`ModelSerializer` is for simplifying the code of a `Serializers`, it provide\n- default implementation of `create()` and `update()`\n- auto generate all fields based on the model\n- auto generate validators for the serializer\n\nLet's use `ModelSerializer` instead of original `serializers`\n\n- Modify the `ArticleSerializer`\n    ```python\n    class ArticleSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = Article\n            fields = ['id', 'title', 'author']\n    ```\n\n- Restart the shell and import `ArticleSerializer`\n    ```python\n    from member.serializers import ArticleSerializer\n    serializer = ArticleSerializer()\n    print(repr(serializer))\n    ```\n\n    output:\n\n    ```python\n    ArticleSerializer():\n        id = IntegerField(label='ID', read_only=True)\n        title = CharField(max_length=100)\n        author = CharField(max_length=100)\n    ```\n    \n- Could also perform all the operations mentioned in previous `Serializers` section\n\n## Conclusion\n\nIn DRF, serializer is just for converting data between instances and different data types such as JSON and XML.\n\nOriginal serializer class is replicating a lot of information that's also contained in the model so DRF provide `ModelSerializer` make the code more concise\n\n## Reference\n\n[DRF API Guide](https://www.django-rest-framework.org/api-guide/serializers/#serializers)\n[Django REST Framework Full Course For Beginners | Build REST API With Django](https://www.django-rest-framework.org/api-guide/serializers/#serializers)\n\n###### tags: `Web`"}},"staticQueryHashes":[]}