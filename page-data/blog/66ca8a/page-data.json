{"componentChunkName":"component---src-templates-post-js","path":"/blog/66ca8a","result":{"pageContext":{"md_path":"drf_serializer","title":"Django REST Framework - Serializers","description":"This article is a brief note about basic DRF serializers (Serializers and ModelSerializer)First, we need to create a simple model for performing follo...","image":"https://i.imgur.com/wmsjgHa.png","uuid":"66ca8a","text":"# Django REST Framework - Serializers\r\n\r\n![](https://i.imgur.com/wmsjgHa.png)\r\n\r\nThis article is a brief note about basic DRF serializers (`Serializers` and `ModelSerializer`)\r\n\r\n## Create A Simple Article Model\r\n\r\nFirst, we need to create a simple model for performing following serializer operations\r\n\r\n- In the `models.py` of the django app, create the `Article` as below\r\n\r\n    ```python\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        author = models.CharField(max_length=100)\r\n        email = models.EmailField(max_length=100)\r\n        date = models.DateField(auto_now_add=True)\r\n\r\n        def __str__(self):\r\n            return self.title\r\n    ```\r\n\r\n- Make migrations to create table in database\r\n    `python manage.py makemigrations`\r\n    `python manage.py migrate`\r\n\r\n## Serializers\r\n\r\n>`serializers` allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types.\r\n\r\nIn short, `serializers` is for converting data between instance and python `dict` so that the data could be easily convert to other formats such as JSON or XML.\r\n\r\nLet's create a simple serializer for `Article` and use Django shell to see what happend.\r\n\r\n- Create `serializers.py` in the Django APP and add below code\r\n    ```python\r\n    from rest_framework import serializers\r\n    from .models import Article\r\n\r\n\r\n    class ArticleSerializer(serializers.Serializer):\r\n        title = serializers.CharField(max_length=100)\r\n        author = serializers.CharField(max_length=100)\r\n        email = serializers.EmailField(max_length=100)\r\n        date = serializers.DateField()\r\n\r\n        def create(self, validated_data):\r\n            return Article.objects.create(validated_data)\r\n\r\n        def update(self, instance, validated_data):\r\n            instance.title = validated_data.get('title', instance.title)\r\n            instance.author = validated_data.get('author', instance.author)\r\n            instance.email = validated_data.get('email', instance.email)\r\n            instance.date = validated_data.get('date', instance.date)\r\n            instance.save()\r\n            return instance\r\n    ```\r\n    \r\n- Start a Django shell\r\n    `python manage.py shell`\r\n\r\n- Import dependencies\r\n    ```python\r\n    from snippets.models import Snippet\r\n    from snippets.serializers import SnippetSerializer\r\n    from rest_framework.renderers import JSONRenderer\r\n    from rest_framework.parsers import JSONParser\r\n    ```\r\n- Create a new `Article` instance\r\n    ```python\r\n    a = Article(title='test title', author='test author', email='test_email@email.com')`\r\n    a.save()\r\n    ```\r\n\r\n- Use `serializer` to serialize the instance `a`\r\n    ```python\r\n    serializer = ArticleSerializer(a)\r\n    serializer.data\r\n    ```\r\n    \r\n    output:\r\n    \r\n    `{'title': 'test title', 'author': 'test author', 'email': 'test_email@email.com', 'date': '2021-07-26'}`\r\n    \r\n    The instance `a` is converted to Python native data type `dict` by `serializer`\r\n    \r\n- Use `JSONRenderer` to render this dictionary to JSON\r\n    ```python\r\n    content = JSONRenderer().render(serilaizer.data)\r\n    content\r\n    ```\r\n    \r\n    output:\r\n    \r\n    `b'{\"title\":\"test title\",\"author\":\"test author\",\"email\":\"test_email@email.com\",\"date\":\"2021-07-26\"}'`\r\n\r\n- Serializers could also serialize a `QuerySet` (multiple instances)\r\n    ```python\r\n    queryset = Article.objects.all()\r\n    serializer = ArticleSerializer(queryset, many=True)\r\n    serializer.data\r\n    ```\r\n    \r\n    output:\r\n    \r\n    ```\r\n    [OrderedDict([('title', 'test title'), ('author', 'test author'), ('email', 'test_email@email.com'), ('date', '2021-07-26')]), OrderedDict([('title', 'test title 2'), ('author', 'test author 2'), ('email', 'test_email_2@email.com'), ('date', '2021-07-26')])]\r\n    ```\r\n\r\n## Model Serializer\r\n\r\n> The ModelSerializer class provides a shortcut that lets you automatically create a Serializer class with fields that correspond to the Model fields.\r\n`ModelSerializer` is for simplifying the code of a `Serializers`, it provide\r\n- default implementation of `create()` and `update()`\r\n- auto generate all fields based on the model\r\n- auto generate validators for the serializer\r\n\r\nLet's use `ModelSerializer` instead of original `serializers`\r\n\r\n- Modify the `ArticleSerializer`\r\n    ```python\r\n    class ArticleSerializer(serializers.ModelSerializer):\r\n        class Meta:\r\n            model = Article\r\n            fields = ['id', 'title', 'author']\r\n    ```\r\n\r\n- Restart the shell and import `ArticleSerializer`\r\n    ```python\r\n    from member.serializers import ArticleSerializer\r\n    serializer = ArticleSerializer()\r\n    print(repr(serializer))\r\n    ```\r\n\r\n    output:\r\n\r\n    ```python\r\n    ArticleSerializer():\r\n        id = IntegerField(label='ID', read_only=True)\r\n        title = CharField(max_length=100)\r\n        author = CharField(max_length=100)\r\n    ```\r\n    \r\n- Could also perform all the operations mentioned in previous `Serializers` section\r\n\r\n## Conclusion\r\n\r\nIn DRF, serializer is just for converting data between instances and `dict` so the data could be easily converted to other formats such as JSON or XML.\r\n\r\nOriginal serializer class is replicating a lot of information that's also contained in the model so DRF provide `ModelSerializer` make the code more concise\r\n\r\n## Reference\r\n\r\n- [DRF API Guide](https://www.django-rest-framework.org/api-guide/serializers/#serializers)\r\n- [Django REST Framework Full Course For Beginners | Build REST API With Django](https://www.django-rest-framework.org/api-guide/serializers/#serializers)\r\n\r\n###### tags: `Web`"}},"staticQueryHashes":[]}