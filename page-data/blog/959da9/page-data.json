{"componentChunkName":"component---src-templates-post-js","path":"/blog/959da9","result":{"pageContext":{"md_path":"flaskAndHerokuDeploy","title":"Deploy Flask APP on Heroku","description":"[TOC]Assume that there is already a Flask APP, There have to be 3 important files in the root directory of your APP:Here is a minimal Flask APPThis fi...","image":"https://i.imgur.com/A2NUkdZ.png","uuid":"959da9","text":"# Deploy Flask APP on Heroku\n\n![](https://i.imgur.com/A2NUkdZ.png)\n\n[TOC]\n\n## Prepare a Flask APP for Heroku\nAssume that there is already a Flask APP, **There have to be 3 important files** in the root directory of your APP:\n> Here is a [minimal Flask APP](https://github.com/yirueilu-b/flask-minimal-app)\n\n### `requirements.txt`:\nThis file make **Heroku know what Python libraies shuold be installed** during conpute instance starts. We could run below command to create it after testing your Flask APP is working locally.\n> Gunicorn must be listed in `requirements.txt` since Heroku runs Flask APP with it. We can simply install Gunicorn by `pip install gunicorn`.\n```\npip freeze > requirements.txt\n```\n### `Procfile`\nFor letting Heroku start the APP. This file must be named as `Procfile` and placed at the root directory of our project to make Heroku find it when trying to start the APP. Below is the content of `Procfile`, `entrypoint` is the name of the Python file that runs Flask APP (usually `main.py` or `app.py`) and the `app instance` is the Flask APP instance in `entrypoint`.\n```python\n# This is etrypoint Python file.\nfrom flask import Flask\n\n# This is the app instance.\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello, Flask APP on Heroku!</p>\"\n```\n\n```\nweb gunicorn [entrypoint]:[app instance]\n```\n### `runtime.txt`\nSpecify the version of Python for the project. We can use `python -V` to check the current installed version of Python and fill the version in the file in `python-x.x.x` format.\n```\npython-x.x.x\n```\n\n### Test the APP Locally and Upload the Code to GitHub REPO\n\nOnce `requirements.txt`, `Procfile` and `runtime.txt` are prepared, we could\nupload it to a GitHub REPO.\n\n- Run `gunicorn -b:5000 [entrypoint]:[app instance]` to see if the APP works correctly.\n- Create a new REPO on GitHub name `REPO name`.\n- Run following command in the root directory:\n    ```\n    git init\n    git add .\n    git commit -m \"Init commit\"\n    git remote add origin https://github.com/[GitHub username]/[REPO name].git\n    git branch -M main\n    git push -u origin main\n    ```\n\n## Setup Heroku\nAn Heroku account is required for following steps. You could signup [here](https://signup.heroku.com/login)\n\n### Create New APP and Deploy\n- Sign in Heroku.\n- Click `New` $\\rightarrow$ `Create new app`.\n    ![](https://i.imgur.com/RvQi7oN.png)\n- Fill `app-name` then click `Create app`.\n    ![](https://i.imgur.com/84mO901.png)\n    > After clicking `Create app`, we will be redirected to deploy setting page.\n- Choose `GitHub` in `Deployment method` section and connect our REPO.\n    ![](https://i.imgur.com/klfaItT.png)\n- Select the branch to deploy.\n    ![](https://i.imgur.com/W8haNHe.png)\n    > Click the `Enable Automatic Deploys` then when we push new code to the given branch, Heroku will help us deploy it automatically.\n- Click the `Deploy Branch` in `Manual deploy` section.\n    ![](https://i.imgur.com/8Q1stMf.png)\n- We could now click `Open app` on top of the page and see if it works!\n\n### Setup Environment Variables For Our APP\n- Add environment variables in `Settings\\Config Vars` on the APP console page\n    ![](https://i.imgur.com/dUmxFnq.png)\n> These variables would be set when Heroku start a new instance, we could go to deploy page and deploy manually to make the change take effect.\n"}},"staticQueryHashes":[]}