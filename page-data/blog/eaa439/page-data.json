{"componentChunkName":"component---src-templates-post-js","path":"/blog/eaa439","result":{"pageContext":{"md_path":"leetcode3","title":"LeetCode 3. Longest Substring Without Repeating Characters","description":"Given a string s, find the length of the longest substring without repeating characters.Example 1:plaintext\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanatio...","image":"https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png","uuid":"eaa439","text":"# LeetCode 3. Longest Substring Without Repeating Characters\n\n![](https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png)\n\n## Description\n\nGiven a string `s`, find the length of the **longest substring** without repeating characters.\n\n**Example 1:**\n\n```plaintext\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n```\n\n**Example 2:**\n\n```plaintext\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n```\n\n**Example 3:**\n\n```plaintext\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n```\n\n**Example 4:**\n\n```plaintext\nInput: s = \"\"\nOutput: 0\n```\n\n**Constraints:**\n- `0 <= s.length <= 5 * 104`\n- `s` consists of English letters, digits, symbols and spaces.\n\n## Idea\n\n**Idea 1**\n\nBrute force, go trough all substrings of `s`, for example: given `s = \"abc\"`, we could easily find its all substrings is `[\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]` by using for loops, and we could check if each subtring is repeating and keep lenghth of longest substring without repeating while iterating through the substrings\n\n**Idea 2**\n\nUsing a sliding widow and keep the substring in window be always without duplicate characters by contracting and extending it\n\n**Idea 3**\n\nWe could further optimize sliding widow idea by optimizing the contracting step.\nIn sliding widow idea, when we encounter duplicate character `c`, we contract the window by moving left pointer one by one untill we met the same character.\nWe could just keep the previous index of each character then we are able to take only one step to contract the window to the right position.\n\n## Solution\n\n**Solution 1 (TLE)**\n\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ans = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                temp = {}\n                is_repeat = False\n                for letter in s[i:j]:\n                    if letter not in temp:\n                        temp[letter] = 1\n                    else:\n                        is_repeat = True\n                        break\n                if not is_repeat:\n                    ans = max(ans, len(temp))\n        return ans\n```\n\n> **Complexity**\n> - Time complexity: `O(n^3)`        \n>   For all substrings `O(n^2)` need `O(n)` to check if duplicate\n> - Space complexity: `O(m)`    \n>   `m` is the number of characters in given character set\n\n**Solution 2**\n\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ans = 0\n        left = 0\n        right = 0\n        # [32, 126] are ascii value for all eglish letters, digits, symbols and spaces\n        # if not remenbering the ascii range, just use an empty dict and check if character is in the dict\n        # but it takes extra time to check existence\n        history = dict(zip([chr(i) for i in range(32, 127)], [0 for _ in range(32, 127)]))    \n        for i in range(len(s)):\n            history[s[i]] += 1\n            while history[s[i]] > 1:\n                history[s[left]] -= 1\n                left += 1\n            ans = max(ans, i-left+1)\n        return ans\n```\n\n> **Complexity**\n> - Time complexity: `O(n)`        \n>   Maximum is `2n` of contracting and extending\n> - Space complexity: `O(m)`\n\n**Solution 3**\n\n```python\ndef lengthOfLongestSubstring(s: str) -> int:\n    ans = 0\n    left = 0\n    history = dict(zip([chr(i) for i in range(32, 127)], [-1 for _ in range(32, 127)]))\n    for i, c in enumerate(s):\n        if left <= history[c] < i: \n            left = history[c] + 1\n        else: \n            ans = max(ans, i-left+1)\n        history[c] = i\n    return ans\n```\n\n> **Complexity**\n> - Time complexity: `O(n)`\n> - Space complexity: `O(m)`\n\n## Note\n\n**Visualize Optimized Sliding Window Approach**\n\n```python\ns = 'abcabcbb'\ns = list(s)\nlength = len(s)\nheight = 1\n\nhistory_ans = []\nhistory_dict = []\nhistory_left = []\nhistory_right = []\nhistory_repeat = []\n\nans = 0\nleft = 0\nhistory = dict(zip([chr(i) for i in range(32, 127)], [-1 for _ in range(32, 127)]))\nfor i, c in enumerate(s):\n    if left <= history[c] < i:\n        history_ans.append(ans)\n        history_dict.append([\"{}:{}\".format(k, v) for k, v in history.items() if v > -1])\n        history_left.append(left)\n        history_right.append(i)\n        history_repeat.append(True)\n        left = history[c] + 1\n        history_ans.append(ans)\n        history_dict.append([\"{}:{}\".format(k, v) for k, v in history.items() if v > -1])\n        history_left.append(left)\n        history_right.append(i)\n        history_repeat.append(False)\n    else:\n        ans = max(ans, i-left+1)\n        history_ans.append(ans)\n        history_dict.append([\"{}:{}\".format(k, v) for k, v in history.items() if v > -1])\n        history_left.append(left)\n        history_right.append(i)\n        history_repeat.append(False)\n    history[c] = i\n```\n```python\nfig = plt.figure(figsize=(int(length * 1.5), int(4 * 1.5)))\nax = fig.add_subplot(111)\nax.set_xlim(-1, length + 1)\nax.set_ylim(-1.5, 2.5)\n# plot rectangles and letters for `s` array\nfor i in range(length):\n    plt.plot([i, i], [height, 0], c='steelblue', lw=1)[0]\n    plt.text(i + 0.5 - 0.08 * len(str(i)), 1 + 0.08, i, fontsize=10, color='steelblue')\n    plt.text(i + 0.5 - 0.09, 0.5 - 0.09, s[i], fontsize=14, color='k')\narr_rect = patches.Rectangle((0, 0), length, height, lw=1, fill=0, ec='steelblue')\n# init title\ntitle = plt.title('i = {}\\ncurrent number of ones = {}\\nans = {}'.format('init', 0, 0), fontsize=14)\n# highlight ones\nindex_rect = patches.Rectangle((0, 0), 0, 0, lw=1, fc=(0.19607843, 0.80392157, 0.19607843, 0.2))\n# point out current index\narrow_i = plt.arrow(0, 0, 0, 0, head_width=0, color='k')\narrow_j = plt.arrow(0, 0, 0, 0, head_width=0, color='k')\ntext_i = plt.text(0, 2.1, '', fontsize=10, color='k')\ntext_j = plt.text(0, 1.9, '', fontsize=10, color='k')\n\n# animation init\ndef init():\n    ax.add_patch(arr_rect)\n    ax.add_patch(index_rect)\n    ax.add_patch(arrow_i)\n    ax.add_patch(arrow_j)\n    return \n\n# animation function, iterate through the result\ndef animate(frame):\n    title.set_text('iteration = {}\\ndict = {}\\ncurrent ans = {}'.format(frame, history_dict[frame], history_ans[frame]))\n    index_rect.set_width(history_right[frame] - history_left[frame] + 1)\n    index_rect.set_height(1)\n    index_rect.set_xy([history_left[frame], 0])\n    index_rect.set_color((0.19607843, 0.80392157, 0.19607843, 0.2))\n    if history_repeat[frame]:\n        index_rect.set_color((0.80392157, 0.19607843, 0.19607843, 0.2))\n    if frame > 0:\n        ax.patches.remove(ax.patches[-1])\n        ax.patches.remove(ax.patches[-1])\n        ax.patches.remove(ax.patches[-1])\n        ax.patches.remove(ax.patches[-1])\n    arrow_i = plt.arrow(history_left[frame] + 0.5, 1.8, 0, -0.25, head_width=0.1, color='k')\n    arrow_j = plt.arrow(history_right[frame] + 0.5, 1.8, 0, -0.25, head_width=0.1, color='k')\n    ax.add_patch(arrow_i)\n    ax.add_patch(arrow_j)\n    text_i.set_x(history_left[frame]+0.35)\n    text_j.set_x(history_right[frame]+0.35)\n    text_i.set_text(\"left={}\".format(history_left[frame]))\n    text_j.set_text(\"right={}\".format(history_right[frame]))\n    return \n    \n# hide axis\nanim = animation.FuncAnimation(fig, \n                               func=animate,\n                               init_func=init,\n                               frames=len(history_ans),\n                               interval=0.9487*1000,\n                              )\nplt.axis('off')\nanimation_html = HTML(anim.to_jshtml())\n# prevent plt show the final plot\nplt.close()\nanimation_html\n```\n\n![](https://github.com/yirueilu-b/coding-problems-and-notes/raw/master/leetcode/3_longest_substring_without_repeating_characters_sliding_window_opt.gif)\n\n###### tags: `Coding`"}},"staticQueryHashes":[]}