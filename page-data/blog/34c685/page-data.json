{"componentChunkName":"component---src-templates-post-js","path":"/blog/34c685","result":{"pageContext":{"md_path":"leetcode1041","title":"LeetCode 1041. Robot Bounded In Circle","description":"On an infinite plane, a robot initially stands at (0, 0) and faces north.  The robot can receive one of three instructions:The robot performs the inst...","image":"https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png","uuid":"34c685","text":"# LeetCode 1041. Robot Bounded In Circle\n\n![](https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png)\n\n## Description\n\nOn an infinite plane, a robot initially stands at (0, 0) and faces north.  The robot can receive one of three instructions:\n\n- ``\"G\"``: go straight 1 unit;\n- ``\"L\"``: turn 90 degrees to the left;\n- ``\"R\"``: turn 90 degress to the right.\n\nThe robot performs the instructions given in order, and repeats them forever.\n\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\n**Example 1:**\n```\nInput: \"GGLLGG\"\nOutput: true\nExplanation: \nThe robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).\nWhen repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.\n```\n\n**Example 2:**\n```\nInput: \"GG\"\nOutput: false\nExplanation: \nThe robot moves north indefinitely.\n```\n\n**Example 3:**\n```\nInput: \"GL\"\nOutput: true\nExplanation: \nThe robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...\n```\nNote:\n\n- 1 <= instructions.length <= 100\n- instructions[i] is in {'G', 'L', 'R'}\n\n## Idea\n\nFollow the given instructions to move the robot then check some conditions to determine if it is in a circle.\n\nThe first condition to check is the final position of the robot and its initial position. It's trivial that if the positions are the same, it is in a circle.\n\nThe second condition is checking the initial and final directions. The robot's initial direction is North, if its final direction is not the same as its initial direction then it is in a circle.\n\n## Solution\n\n```python\nclass Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        init_position = [0, 0]\n        position = [0, 0]\n        init_direction = (0, 1)\n        direction = (0, 1)\n        for instruction in instructions:\n            if instruction == \"G\":\n                position[0] += direction[0]\n                position[1] += direction[1]\n            elif instruction == \"L\":\n                if direction == (0, 1):\n                    direction = (-1, 0)\n                elif direction == (-1, 0):\n                    direction = (0, -1)\n                elif direction == (0, -1):\n                    direction = (1, 0)\n                else:\n                    direction = (0, 1)\n            else:\n                if direction == (0, 1):\n                    direction = (1, 0)\n                elif direction == (1, 0):\n                    direction = (0, -1)\n                elif direction == (0, -1):\n                    direction = (-1, 0)\n                else:\n                    direction = (0, 1)\n        return init_position == position or init_direction != direction\n```\n\n> **Complexity**\n> - Time complexity: `O(n)`        \n>   Iterate through `n` given instructions\n> - Space complexity: `O(1)`    \n>   Only constant variables for keeping latest position and direction\n\n## Note\n\n- The key of this problem is to think of the condition of final direction.\n\n- Visualize the process:\n\n```python\nplt.figure(figsize=(32, 6))\nfor i in range(4):\n    init_position = [0, 0]\n    position = [0, 0]\n    init_direction = (0, 1)\n    direction = (0, 1)\n    plt.subplot(1,5,i+1)\n    plt.title(\"Run instructions Iteration \" + str(i+1))\n    plt.scatter(position[0], position[1], c='g')\n    plt.arrow(position[0], position[1] ,dx=direction[0]*0.3,dy=direction[1]*0.3, head_width=0.5, head_length=0.3, fc='g', ec='g')\n    for i in range(i+1):\n        iteration = 0\n        for instruction in instructions:\n            if instruction == \"G\":\n                position[0] += direction[0]\n                position[1] += direction[1]\n            elif instruction == \"L\":\n                if direction == (0, 1):\n                    direction = (-1, 0)\n                elif direction == (-1, 0):\n                    direction = (0, -1)\n                elif direction == (0, -1):\n                    direction = (1, 0)\n                else:\n                    direction = (0, 1)\n            else:\n                if direction == (0, 1):\n                    direction = (1, 0)\n                elif direction == (1, 0):\n                    direction = (0, -1)\n                elif direction == (0, -1):\n                    direction = (-1, 0)\n                else:\n                    direction = (0, 1)\n            plt.scatter(position[0], position[1], c='b')\n            plt.arrow(position[0], position[1] ,dx=direction[0]*0.3,dy=direction[1]*0.3, head_width=0.5, head_length=0.3, fc='b', ec='b')\n            iteration += 1\n    plt.scatter(position[0], position[1], c='r')\n    plt.arrow(position[0], position[1] ,dx=direction[0]*0.3,dy=direction[1]*0.3, head_width=0.5, head_length=0.3, fc='r', ec='r')\n    plt.grid()\nplt.show()\n```\n\n![](https://i.imgur.com/tlGlvrC.png)\n\n![](https://i.imgur.com/0Un2vT4.png)\n\n- Remember to read the description carefully!\n\n###### tags: `Coding`"}},"staticQueryHashes":[]}