{"componentChunkName":"component---src-templates-post-js","path":"/blog/c7bdb3","result":{"pageContext":{"md_path":"mediapipeHandTracking","title":"Multiple Hand Tracking Using MediaPipe Models in Python","description":"Google MediaPipe has released their paper and models of hand tracking recently. After reading the paper, I am so impressed by their work. They use som...","image":"https://i.imgur.com/x5xVgad.png","uuid":"c7bdb3","text":"# Multiple Hand Tracking Using MediaPipe Models in Python\n\nGoogle MediaPipe has released their paper and models of hand tracking recently. After reading the paper, I am so impressed by their work. They use some clever methods to simplify the hand tracking task thus make it possible to do this task in real-time and keep great performance. Then I start to try playing with the models in Python, In this post, I take some notes of how to use their models in Python and create a simple demo with webcam. The complete code could be found [here](https://github.com/yirueilu-b/HandTracking)\n\n## The Hand Tracking Workflow\n\nAs the graph provided by MediaPipe below, we could summarize the steps which multiple hand tracking process takes like: \n\n$numHand = 0$\n\n$isFirstFrame = True$\n\n$while \\space True:$\n\n$\\quad frame = readFrame()$\n\n$\\quad inputFrame = preprocessImage(frame)$\n\n$\\quad if \\space isFirstFrame \\space or \\space numHand < expectNumHand:$\n\n$\\quad \\quad isFirstFrame = False$\n\n$\\quad \\quad keyPoints = detectPalm(inputFrame)$\n\n$\\quad \\quad hand = cropHandFromPalmRes(inputFrame, \nkeyPoints)$\n\n$\\quad else:$\n\n$\\quad \\quad hand = cropHandFromPrevRes(inputFrame, \nlandmark)$\n\n$\\quad landmark, isHand = detectLandmark(hand)$\n\n$\\quad drawLandmark()$\n\n![](https://i.imgur.com/x5xVgad.png)\n\n## Write the Code of Components in Workflow\n\nAccording to the above algorithm, we could write the actual Python code to implement the hand tracking demo now\n\n### preprocessImage\n\nThe input image of palm detector should be: \n- converted to `RGB`\n- padded to square with zeros\n- resized to `(256, 256)`\n- normalized by `2 * ((image / 255) - 0.5)`\n\n```python\ndef preprocess(bgr_image, w, h):\n    # convert to rgb\n    rgb_image = bgr_image[:, :, ::-1]\n    # pad to square and resize\n    shape = np.r_[rgb_image.shape]\n    padding = (shape.max() - shape[:2]).astype('uint32') // 2\n    rgb_image = np.pad(rgb_image, ((padding[0], padding[0]), (padding[1], padding[1]), (0, 0)), mode='constant')\n    padding_image = rgb_image.copy()\n\n    rgb_image = cv2.resize(rgb_image, (w, h))\n    # normalize\n    input_image = np.ascontiguousarray(2 * ((rgb_image / 255) - 0.5).astype('float32'))\n    padding_image = np.ascontiguousarray(2 * ((padding_image / 255) - 0.5).astype('float32'))\n    return input_image, padding_image, padding\n```\n\n![](https://i.imgur.com/rbBgVNT.png)\n\n### detectPalm\n\nPass the preprocessed image to `detectPalm` to get corresponding 7 key points and bounding box of palm\n\n![](https://i.imgur.com/n4pGw1I.png)\n\n```python\n# inference\ndef detect_palm(input_image, palm_detector, input_details, output_details):\n    palm_detector.set_tensor(input_details[0]['index'], input_image.reshape(1, 256, 256, 3))\n    palm_detector.invoke()\n    output_reg = palm_detector.get_tensor(output_details[0]['index'])[0]\n    output_clf = palm_detector.get_tensor(output_details[1]['index'])[0, :, 0]\n    return output_reg, output_clf\n```\n\n>shape of output_reg -> (number of anchors, number of predictions)\n>shape of output_clf -> (number of anchors, 1)\n>- number of anchors = 2944\n>- number of predictions = 18 \n>    - 0 to 4 are bounding box offset, width and height: dx, dy, w ,h\n>    - 4 to 18 are 7 hand keypoint x and y coordinates: x1, y1, x2, y2, ..., x7, y7\n>\n>**output_reg: bounding boxes and keypoints**\n>**output_clf: confidence of each anchors**\n\n```python\n# get actual coordinate of key points from prediction\ndef get_res_from_palm_detector(output_reg, output_clf):\n    # normalize scores to range 0 to 1 using sigmoid\n    scores = sigmoid(output_clf)\n    # filter by threshold\n    output_reg = output_reg[scores > DETECTION_THRESHOLD]\n    output_clf = output_clf[scores > DETECTION_THRESHOLD]\n    candidate_anchors = anchors[scores > DETECTION_THRESHOLD]\n    if output_reg.shape[0] == 0: print(\"No hands found\")\n    # get actual coordinate by pre-defined anchor\n    moved_output_reg = output_reg.copy()\n    moved_output_reg[:, :2] = moved_output_reg[:, :2] + candidate_anchors[:, :2] * 256\n    # NMS for bounding boxes\n    box_ids = fast_nms(moved_output_reg[:, :4], output_clf, NMS_THRESHOLD)\n    # convert the coordinates back to the scale in original image size\n    box_list = moved_output_reg[box_ids, :4].astype('int')\n    side_list = []\n    key_point_list = moved_output_reg[box_ids, 4:].reshape(-1, 7, 2)\n    center_wo_offst = candidate_anchors[box_ids, :2] * 256\n    for i in range(len(key_point_list)):\n        key_point_list[i] = key_point_list[i] + center_wo_offst[i]\n        x, y, w, h = box_list[i]\n        side_list.append(max(w, h) * BOX_ENLARGE)\n    return key_point_list, side_list\n```\n\n![](https://i.imgur.com/ftZrqPW.png)\n\n### preprocessForLandmarkModel\n\nUse the keypoints to crop hand on image and rotate to the specific angle. With `getAffineTransform` function, we could define the matrices then get the cropped hand image directly.\n\n![](https://i.imgur.com/fYFInLE.png)\n\n```python\ndef get_hand(input_image, key_points, side):\n    source = get_triangle(key_points[0], key_points[2], side)\n    source -= (key_points[0] - key_points[2]) * BOX_SHIFT\n    transform_mat = cv2.getAffineTransform(source * max(input_image.shape) / INPUT_WIDTH, TARGET_TRIANGLE)\n    hand = cv2.warpAffine(input_image, transform_mat, (INPUT_WIDTH, INPUT_HEIGHT))\n    return hand, source\n```\n\n### detectLandmark\n\nPass the preprocessed image to `detectLandmark` to get corresponding 21 key points of hand\n\n![](https://i.imgur.com/AsUnjLW.png)\n\n```python\ndef detect_landmark(hand, landmark_model, input_details, output_details):\n    landmark_model.set_tensor(input_details[0]['index'], hand.reshape(1, 256, 256, 3))\n    landmark_model.invoke()\n    landmark = landmark_model.get_tensor(output_details[0]['index']).reshape(-1, 2)\n    is_hand = landmark_model.get_tensor(output_details[1]['index']) > HAND_THRESHOLD\n    return landmark, is_hand\n```\n```python\ndef convert_landmark_back(joints, source, padding, image):\n    # projecting keypoints back into original image coordinate space\n    transform_mat = cv2.getAffineTransform(source * max(image.shape) / INPUT_WIDTH, TARGET_TRIANGLE)\n    transform_mat = np.pad(transform_mat.T, ((0, 0), (0, 1)), constant_values=1, mode='constant').T\n    transform_mat[2, :2] = 0\n    transform_mat_inv = np.linalg.inv(transform_mat)\n    landmark = (np.pad(joints, ((0, 0), (0, 1)), constant_values=1, mode='constant') @ transform_mat_inv.T)[:, :2]\n    landmark -= padding[::-1]\n\n    # projecting keypoints back into input image coordinate space\n    landmark_input = landmark + padding[::-1]\n    landmark_input = landmark_input * INPUT_WIDTH / max(image.shape)\n    return landmark, landmark_input\n```\n\n![](https://i.imgur.com/DeNgmEH.png)\n\n### Visualize the Hand Tracking Process\n\n![](https://i.imgur.com/oxYN0kv.png)\n\n## Pulling it all together\n\n```python\nimport tensorflow as tf\nfrom hand_tracking_utils import *\n\nWINDOW_NAME = 'MediaPipe Hand Tracking'\nPALM_MODEL_PATH = os.path.join('models', 'palm_detection_without_custom_op.tflite')\nLANDMARK_MODEL_PATH = os.path.join('models', 'hand_landmark.tflite')\nNUM_TRACK_HAND = 2\n\nif __name__ == '__main__':\n    cap = cv2.VideoCapture(1)\n    cv2.resizeWindow(WINDOW_NAME, IMAGE_WIDTH, IMAGE_HEIGHT)\n    # load palm model\n    palm_model = tf.lite.Interpreter(model_path=PALM_MODEL_PATH)\n    palm_model.allocate_tensors()\n    palm_input_details = palm_model.get_input_details()\n    palm_output_details = palm_model.get_output_details()\n    # load landmark model\n    landmark_model = tf.lite.Interpreter(model_path=LANDMARK_MODEL_PATH)\n    landmark_model.allocate_tensors()\n    landmark_input_details = landmark_model.get_input_details()\n    landmark_output_details = landmark_model.get_output_details()\n    # out = cv2.VideoWriter('output.mp4', -1, 5., (640, 480))\n    num_valid_hand = 0\n    is_first_frame = True\n    prev_res = None\n    while True:\n        # read and preprocess a frame\n        _, frame = cap.read()\n        input_image, padding_image, padding = preprocess(frame, INPUT_WIDTH, INPUT_HEIGHT)\n        if is_first_frame or num_valid_hand < NUM_TRACK_HAND:\n            print(\"Palm Detector Activated!\")\n            is_first_frame = False\n            output_reg, output_clf = detect_palm(input_image, palm_model, palm_input_details, palm_output_details)\n            key_point_list, side_list = get_res_from_palm_detector(output_reg, output_clf)\n        else:\n            print(\"Palm Detector Not Activated!\")\n            key_point_list, side_list = get_res_from_prev_res(prev_res)\n\n        prev_res = []\n        for i in range(len(key_point_list)):\n            hand, source = get_hand(padding_image, key_point_list[i], side_list[i])\n            landmark, is_hand = detect_landmark(hand, landmark_model, landmark_input_details, landmark_output_details)\n            if is_hand:\n                landmark, landmark_input = convert_landmark_back(landmark, source, padding, frame)\n                frame = draw_landmark(frame, landmark)\n                prev_res.append(landmark_input)\n\n        num_valid_hand = len(prev_res)\n        cv2.imshow(WINDOW_NAME, frame)\n        # out.write(original_frame)\n\n        # press 'q' to exit\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            cap.release()\n            cv2.destroyAllWindows()\n            break\n\n    cap.release()\n    cv2.destroyAllWindows()\n```\n\n## Result\n\n![](https://i.imgur.com/dRv6k7w.gif)\n\n\n###### tags: `Machine Learning`"}},"staticQueryHashes":[]}