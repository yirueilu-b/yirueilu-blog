{"componentChunkName":"component---src-templates-post-js","path":"/blog/ac8f3b","result":{"pageContext":{"md_path":"opencvPython","title":"Basic Operations in OpenCV-Python","description":"Take a note of some basic and common operations in OpenCV-Python. I also write the note in Jupyter notebook and the code is at here. OpenCV is one of ...","image":"https://i.imgur.com/INQBQvX.png","uuid":"ac8f3b","text":"# Basic Operations in OpenCV-Python\n\nTake a note of some basic and common operations in OpenCV-Python. I also write the note in Jupyter notebook and the code is at [here](https://). OpenCV is one of the most popular library. It includes hundreds of computer vision algorithms and its speed is relatively higher than other libraries such as Pillow and scikit-image in Python.\n\n## Environment\n\n- Windows 10\n- Python 3.6.8\n- jupyter 1.0.0\n- opencv-python 4.4.0.42\n\n## Read Image\n\n**Function**\n\n```python\ncv2.imread(filename, flag)\n```\n> `flag`: the way image to be read\n> - `cv2.IMREAD_COLOR`: default value, could pass int 1 intead the string, read image in BGR ( 3 channel )\n> - `cv2.IMREAD_GRAYSCALE`: could pass int 0 intead the string, read image in grayscale ( 1 channel )\n> - `cv2.IMREAD_UNCHANGED`: could pass int -1 intead the string, read image in BRGA mode ( 4 channel )\n\n**Example**\n\n```python\n# read with different flags\nimage = cv2.imread(IMAGE_PATH)\nimage_bgr = cv2.imread(IMAGE_PATH, 1)\nimage_gray = cv2.imread(IMAGE_PATH, 0)\nimage_bgra = cv2.imread(IMAGE_PATH, -1)\n# show the images and shape of images\n# OpenCV-Python read image in HWC ( Height, Width, Channel ) format\n\n# Matplotlib show images with RGB color \n# therefore the image seems strange before converting color space\nplt.figure(figsize=(8, 7))\nplt.subplot(221)\nplt.title((\"shape of image: %s\" % (image.shape, )))\nplt.imshow(image)\nplt.subplot(222)\nplt.title((\"shape of image_bgr: %s\" % (image_bgr.shape, )))\nplt.imshow(image_bgr)\nplt.subplot(223)\nplt.title((\"shape of image_gray: %s\" % (image_gray.shape, )))\nplt.imshow(image_gray, cmap='gray')\nplt.subplot(224)\nplt.title((\"shape of image_bgra: %s\" % (image_bgra.shape, )))\nplt.imshow(image_bgra)\nplt.tight_layout()\nplt.show()\n```\n![](https://i.imgur.com/INQBQvX.png)\n\n\n## Write Image\n\n**Function**\n\n```python\ncv2.imwrite(filename, image)\n```\n\n**Example**\n\n```python\n# write the image to the OUTPUT_PATH then read it\ncv2.imwrite(OUTPUT_PATH, image)\noutput_image = cv2.imread(OUTPUT_PATH)\n# show the image\nplt.figure(figsize=(6, 6))\nplt.imshow(output_image)\nplt.show()\n```\n![](https://i.imgur.com/foia96R.png)\n\n\n## Convert Color Space of Image\n\n**Function**\n\n```python\ncv2.cvtColor(input_image, flag)\n```\n> `flag`: the type of conversion\n> - `cv2.COLOR_BGR2HSV`\n> - `cv2.COLOR_BGR2GRAY`\n> - ...\n\n> There are 274 types of conversion in total, we could check the types with the code below.\n> ```python\n> flags = [i for i in dir(cv2) if i.startswith('COLOR_')]\n> [print(flag) for flag in flags[:5]]\n> print('...')\n> print(\"There are %s types in total\" % len(flags))\n> ```\n> ```\n> COLOR_BAYER_BG2BGR\n> COLOR_BAYER_BG2BGRA\n> COLOR_BAYER_BG2BGR_EA\n> COLOR_BAYER_BG2BGR_VNG\n> COLOR_BAYER_BG2GRAY\n> ...\n> There are 274 types in total\n> ```\n\n**Example**\n\n```python\nimage = cv2.imread(IMAGE_PATH)\nimage_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nimage_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\nplt.figure(figsize=(8, 7))\nplt.subplot(221)\nplt.title(\"Default BGR\")\nplt.imshow(image)\nplt.subplot(222)\nplt.title(\"RGB\")\nplt.imshow(image_rgb)\nplt.subplot(223)\nplt.title(\"Gray\")\nplt.imshow(image_gray, cmap='gray')\nplt.subplot(224)\nplt.title(\"HSV\")\nplt.imshow(image_hsv)\nplt.tight_layout()\nplt.show()\n```\n![](https://i.imgur.com/1OeNmav.png)\n\n> Since the image is just a numpy array, we could just manipulate the array like the code below to convert image between BGR and RGB\n> ```python\n> # reverse the order of channel, i.e. [B, G, R] to [R, G, B]\n> image = image[:,:,::-1]\n> ```\n\n## Resize\n\n**Function**\n\n```python\ncv2.resize(img, None, fx, fy, interpolation)\n# or\ncv2.resize(img, (width, height), interpolation)\n```\n\n> `fx`: scale factor along the horizontal axis\n> `fy`: scale factor along the vertical axis\n> `interpolation`: \n> - `INTER_NEAREST`\n> - `INTER_LINEAR`\n> - `INTER_AREA`\n> - `INTER_CUBIC`\n> - `INTER_LANCZOS4`\n\n**Example**\n\n```python\nimage = cv2.imread(IMAGE_PATH)[:,:,::-1]\nheight, width = image.shape[:2]\nimage_enlarge = cv2.resize(image, None, fx=2.1, fy=2.1, interpolation=cv2.INTER_NEAREST)\nimage_2x = cv2.resize(image, (width*2, height*2), cv2.INTER_LINEAR)\nimage_new_ratio = cv2.resize(image, (width*3, height*2), cv2.INTER_CUBIC)\n\nplt.figure(figsize=(8, 7))\nplt.subplot(221)\nplt.title((\"shape of image: %s\" % (image.shape, )))\nplt.imshow(image)\nplt.subplot(222)\nplt.title((\"shape of image_enlarge: %s\" % (image_enlarge.shape, )))\nplt.imshow(image_enlarge)\nplt.subplot(223)\nplt.title((\"shape of image_2x: %s\" % (image_2x.shape, )))\nplt.imshow(image_2x)\nplt.subplot(224)\nplt.title((\"shape of image_new_ratio: %s\" % (image_new_ratio.shape, )))\nplt.imshow(image_new_ratio)\nplt.tight_layout()\nplt.show()\n```\n![](https://i.imgur.com/yTwEUT2.png)\n\n> To Be Continued...\n\n###### tags: `Coding`"}},"staticQueryHashes":[]}